"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 3.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
from django.utils.translation import gettext_lazy as _

import environ

env = environ.Env(
    DEBUG=(bool, True),
    ALLOWED_HOSTS=(list, ['*']),
    FRONTEND_DOMAIN=(str, 'dev.gooood.ru'),
    SOCIAL_AUTH_GOOGLE_OAUTH2_KEY=(str, ''),
    SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET=(str, ''),
    EMAIL_HOST=(str, ''),
    EMAIL_PORT=(str, ''),
    EMAIL_HOST_USER=(str, ''),
    EMAIL_HOST_PASSWORD=(str, ''),
    EMAIL_USE_TLS=(bool, False),
    EMAIL_USE_SSL=(bool, False),
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

environ.Env.read_env(str(BASE_DIR.parent / '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '$s^oe8demqc--(c8bs8)b_@@kuw03g#a(w^33igt$#@blpw=0!'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

ALLOWED_HOSTS = env('ALLOWED_HOSTS')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # 'django.contrib.sites',
    # 'allauth',
    # 'allauth.account',
    # 'allauth.socialaccount',
    # 'allauth.socialaccount.providers.google',

    # 'social_django',

    'adminsortable2',

    "graphql_auth",

    'corsheaders',
    'graphene_django',
    'import_export',
    'parler',
    'users',
    'shop',
    'content',
    'pagedown.apps.PagedownConfig',
    'mptt',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',

    'corsheaders.middleware.CorsMiddleware',

    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {

        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 'DIRS': [],
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'ru'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/backend/'
STATIC_ROOT = (BASE_DIR / 'static' / 'backend').resolve()

MEDIA_URL = '/media/'
MEDIA_ROOT = (BASE_DIR / 'media').resolve()

AUTH_USER_MODEL = 'users.CustomUser'

GRAPHENE = {
    'SCHEMA': 'app.schema.schema',
    'MIDDLEWARE': [
        'graphql_jwt.middleware.JSONWebTokenMiddleware',
    ],
}

LANGUAGES = [
    ('ru', _('Russian')),
    ('en', _('English')),
]

PARLER_LANGUAGES = {
    None: (
        {'code': 'ru', },
        {'code': 'en', },
    ),
    'default': {
        'fallbacks': ['ru', 'en'],  # defaults to PARLER_DEFAULT_LANGUAGE_CODE
        'hide_untranslated': False,  # the default; let .active_translations() return fallbacks too.
    }
}

PARLER_DEFAULT_LANGUAGE_CODE = 'ru'

CORS_ALLOW_ALL_ORIGINS = True

DATA_UPLOAD_MAX_NUMBER_FIELDS = 10240

# SITE_ID=1

# ACCOUNT_USER_MODEL_USERNAME_FIELD = None
# ACCOUNT_EMAIL_REQUIRED = True
# ACCOUNT_USERNAME_REQUIRED = False
# ACCOUNT_AUTHENTICATION_METHOD = 'email'
#
# SOCIALACCOUNT_PROVIDERS = {
#     'google': {
#         'APP': {
#             'client_id': '123',
#             'secret': env('SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET', default=''),
#             'key': env('SOCIAL_AUTH_GOOGLE_OAUTH2_KEY', default=''),
#         }
#     }
# }

# SOCIAL_AUTH_USER_MODEL = 'users.models.CustomUser'
#
# AUTHENTICATION_BACKENDS = [
#     'django.contrib.auth.backends.ModelBackend',
#     'social_core.backends.google.GoogleOAuth2',
#     'social_core.backends.facebook.FacebookOAuth2',
#     'social_core.backends.twitter.TwitterOAuth',
# ]
#
#
# SOCIAL_AUTH_GOOGLE_OAUTH2_KEY =\
#      env('SOCIAL_AUTH_GOOGLE_OAUTH2_KEY', default='')
#
# SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET =\
#     env('SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET', default='')

AUTHENTICATION_BACKENDS = [
    'graphql_jwt.backends.JSONWebTokenBackend',
    'django.contrib.auth.backends.ModelBackend',
    "graphql_auth.backends.GraphQLAuthBackend",
]

GRAPHQL_AUTH = {
    'LOGIN_ALLOWED_FIELDS': ['email', ],
    'REGISTER_MUTATION_FIELDS': ["email", ],
    # 'EMAIL_FROM': 'test@test',
    'EMAIL_TEMPLATE_VARIABLES': {
        'frontend_domain': env('FRONTEND_DOMAIN'),
        'frontend_site_name': 'Gooood.ru'
    },
    'PASSWORD_RESET_PATH_ON_EMAIL': 'login/password-reset'
}

GRAPHQL_JWT = {
    # "JWT_VERIFY_EXPIRATION": True,

    # optional
    # "JWT_LONG_RUNNING_REFRESH_TOKEN": True,

    # 'JWT_AUTH_HEADER_PREFIX': '',

    "JWT_ALLOW_ANY_CLASSES": [
        "graphql_auth.mutations.Register",
        # "graphql_auth.mutations.VerifyAccount",
        # "graphql_auth.mutations.ResendActivationEmail",
        "graphql_auth.mutations.SendPasswordResetEmail",
        "graphql_auth.mutations.PasswordReset",
        "graphql_auth.mutations.ObtainJSONWebToken",
        # "graphql_auth.mutations.VerifyToken",
        # "graphql_auth.mutations.RefreshToken",
        # "graphql_auth.mutations.RevokeToken",
        # "graphql_auth.mutations.VerifySecondaryEmail",
    ],
}

# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

EMAIL_HOST = env('EMAIL_HOST')
EMAIL_PORT = env('EMAIL_PORT')
EMAIL_HOST_USER = env('EMAIL_HOST_USER')
DEFAULT_FROM_EMAIL = env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')
EMAIL_USE_TLS = env('EMAIL_USE_TLS')
EMAIL_USE_SSL = env('EMAIL_USE_SSL')
EMAIL_TIMEOUT = 100
